---
#
# ci/pipeline.yml
#
# Pipeline structure file for a Docker Image pipeline
#
# DO NOT MAKE CHANGES TO THIS FILE.  Instead, modify
# ci/settings.yml and override what needs overridden.
# This uses spruce, so you have some options there.
#
# author:  James Hunt <james@niftylogic.com>
#          Dennis Bell <dennis.j.bell@gmail.com>
# created: 2016-03-04

meta:
  name:     (( param "Please name your pipeline" ))
  release:  (( grab meta.name ))
  target:   (( param "Please identify the name of the target Concourse CI" ))
  url:      (( param "Please specify the full url of the target Concourse CI" ))
  pipeline: (( grab meta.name ))
  task_config:
    platform: linux
    image_resource:
      type: docker-image
      source:
        repository: starkandwayne/concourse
        tag:        latest

  docker:
    dockerfile: "Dockerfile"

  git:
    email:  (( param "Please provide the git email for automated commits" ))
    name:   (( param "Please provide the git name for automated commits" ))

  aws:
    bucket:     (( concat meta.name "-pipeline" ))
    region_name: us-east-1
    access_key: (( param "Please set your AWS Access Key ID" ))
    secret_key: (( param "Please set your AWS Secret Key ID" ))

  github:
    uri:          (( concat "git@github.com:" meta.github.owner "/" meta.github.repo ))
    owner:        (( param "Please specify the name of the user / organization that owns the Github repository" ))
    repo:         (( param "Please specify the name of the Github repository" ))
    branch:       master
    private_key:  (( param "Please generate an SSH Deployment Key for this repo and specify it here" ))
    access_token: (( param "Please generate a Personal Access Token and specify it here" ))

  dockerhub:
    email:      (( param "Please specify the email address for your Dockerhub account" ))
    username:   (( param "Please specify the username for your Dockerhub account" ))
    password:   (( param "Please specify the password for your Dockerhub account" ))
    repository: (( param "Please specify the name of the image (repo/name) that you are building" ))

groups:
  - name: (( grab meta.name ))
    jobs:
      - build-latest
      - rc
      - pre
      - shipit
  - name: versioning
    jobs:
      - major
      - minor
      - patch

jobs:
  - name: build-latest
    public: true
    serial: true
    plan:
    - get: git
      trigger: true
    - in_parallel:
        fail_fast: true
        steps:
        - put: amd64
          params:
            tag_as_latest: false
            build:      "git"
            cache:      true
            dockerfile: (( concat "git/" meta.docker.dockerfile ))
        - put: arm64
          params:
            tag_as_latest: false
            build_args:
              GOARCH: "arm64"
            build:      "git"
            cache:      true
            dockerfile: (( concat "git/" meta.docker.dockerfile ))
        - put: armhf
          params:
            tag_as_latest: false
            build_args:
              GOARCH: "arm"
              GOARM:  "7"
            build:      "git"
            cache:      true
            dockerfile: (( concat "git/" meta.docker.dockerfile ))
    - task: tag-files
      config:
        .: (( inject meta.task_config ))
        outputs: [{name: tags}]
        run:
          path: sh
          args:
          - -ce
          - |
            echo "latest" > tags/version
            echo "latest-amd64" > tags/amd64
            echo "latest-arm64" > tags/arm64
            echo "latest-armhf" > tags/armhf
    - put: image-manifest
      params:
        tag_file: tags/version
        manifests:
        - {arch: amd64, os: linux, tag_file: tags/amd64}
        - {arch: arm64, os: linux, tag_file: tags/arm64}
        - {arch: arm,   os: linux, tag_file: tags/armhf, variant: "v7"}

  - name: shipit
    public: true
    serial: true
    plan:
    - do:
      - in_parallel:
          steps:
          - { get: version, passed: [rc], params: {bump: final} }
          - { get: git,     passed: [rc] }
          - { get: amd64,   passed: [build-latest], params: {skip_download: true} }
          - { get: arm64,   passed: [build-latest], params: {skip_download: true} }
          - { get: armhf,   passed: [build-latest], params: {skip_download: true} }
    - task: tag-files
      config:
        .: (( inject meta.task_config ))
        inputs:
        - name: version
        - name: amd64
        - name: arm64
        - name: armhf
        outputs: [{name: tags}]
        run:
          path: sh
          args:
          - -ceux
          - |
            echo "v$(cat version/version)" > tags/version
    - put: image-manifest
      params:
        tag_file: tags/version
        manifests:
        - { arch: amd64, os: linux, digest_file: amd64/digest }
        - { arch: arm64, os: linux, digest_file: arm64/digest }
        - { arch: arm,   os: linux, digest_file: armhf/digest, variant: "v7" }
    - task: update-demo
      config:
        .: (( inject meta.task_config ))
        inputs:
        - name: git
        - name: version
        outputs: [{name: git-demo}]
        params:
          image: (( grab meta.dockerhub.repository ))
        run:
          path: sh
          args:
          - -ce
          - |
            : ${image:?required}
            version=$(cat version/version)
            git clone git git-demo
            cd git-demo
            sed -i'' "s%image: ${image}:.*$%image: ${image}:v${version}%" demo/demo.yaml
            sed -i'' "s%image: ${image}:.*$%image: ${image}:v${version}%" demo/src/deployment.yaml
            sed -i'' "s%image: ${image}:.*$%image: ${image}:v${version}%" demo/deploy/deployment.yaml
            sed -i'' "s%tag: ${image}:.*$%tag: ${image}:v${version}%" values.yaml
    - task: release
      config:
        .: (( inject meta.task_config ))
        inputs:
        - name: git-demo
        - name: version
        outputs:
        - name: pushme
        - name: gh
        params:
          REPO_ROOT: git-demo
          REPO_OUT:  pushme
          RELEASE_ROOT: gh
          RELEASE_NAME: (( grab meta.name ))
          VERSION_FROM: version/version
          GIT_EMAIL: (( grab meta.git.email ))
          GIT_NAME:  (( grab meta.git.name ))
        run:
          path: git-demo/ci/scripts/release.sh
    - put: git
      params:
        rebase: true
        repository: pushme/git-demo
    - put: github
      params:
        name:   gh/name
        tag:    gh/tag
        body:   gh/notes.md
        # globs: [gh/artifacts/*]
    - put: version
      params:
        bump: patch

  - name: pre
    public: true
    serial: true
    plan:
    - do:
      - get: git
        passed:
        - build-latest
        trigger: true
      - get: version
        trigger: true
      - task: release-notes
        config:
          .: (( inject meta.task_config ))
          run:
            path: sh
            args:
            - -ce
            - |
              cd git
              if [ -f ci/release_notes.md ]; then
                echo "######   RELEASE NOTES   ###############"
                echo
                cat ci/release_notes.md
                echo
                echo "########################################"
                echo
              else
                echo "NO RELEASE NOTES HAVE BEEN WRITTEN"
                echo "You *might* want to do that before"
                echo "hitting (+) on that shipit job..."
                echo
              fi
          inputs:
          - name: git

  - name: rc
    public: true
    serial: true
    plan:
    - do:
      - { get: git,     trigger: true,  passed: [pre] }
      - { get: version, trigger: false, params: {pre: rc} }
      - task: release-notes
        config:
          .: (( inject meta.task_config ))
          inputs:
          - { name: git }
          run:
            path: sh
            args:
            - -ce
            - |
              cd git
              if [ -f ci/release_notes.md ]; then
                echo "######   RELEASE NOTES   ###############"
                echo
                cat ci/release_notes.md
                echo
                echo "########################################"
                echo
              else
                echo "NO RELEASE NOTES HAVE BEEN WRITTEN"
                echo "You *might* want to do that before"
                echo "hitting (+) on that shipit job..."
                echo
              fi
      - put: version
        params: {file: version/number}

  - name: minor
    public: true
    plan:
    - do:
      - { get: version, trigger: false, params: {bump: minor} }
      - { put: version,                 params: {file: version/number} }

  - name: patch
    public: true
    plan:
    - do:
      - { get: version, trigger: false, params: {bump: patch} }
      - { put: version,                 params: {file: version/number} }

  - name: major
    public: true
    plan:
    - do:
      - { get: version, trigger: false, params: {bump: major} }
      - { put: version,                 params: {file: version/number} }

resource_types:
- name: docker-manifest
  type: docker-image
  source:
    # repository: mbialon/concourse-docker-manifest-resource
    repository: drnic/concourse-docker-manifest-resource
resources:
  - name: git
    type: git
    source:
      uri:         (( grab meta.github.uri ))
      branch:      (( grab meta.github.branch ))
      private_key: (( grab meta.github.private_key ))

  - name: amd64
    type: docker-image
    source:
      .: (( inject meta.dockerhub ))
      tag: latest-amd64

  - name: arm64
    type: docker-image
    source:
      .: (( inject meta.dockerhub ))
      tag: latest-arm64

  - name: armhf
    type: docker-image
    source:
      .: (( inject meta.dockerhub ))
      tag: latest-armhf

  - name: image-manifest
    type: docker-manifest
    source:
      .: (( inject meta.dockerhub ))
      tag: latest

  - name: version
    type: semver
    source :
      driver:            s3
      bucket:            (( grab meta.aws.bucket ))
      region_name:       (( grab meta.aws.region_name ))
      key:               version
      access_key_id:     (( grab meta.aws.access_key ))
      secret_access_key: (( grab meta.aws.secret_key ))
      initial_version:   (( grab meta.initial_version || "0.0.1" ))

  - name: github
    type: github-release
    source:
      user:         (( grab meta.github.owner ))
      repository:   (( grab meta.github.repo ))
      access_token: (( grab meta.github.access_token ))
