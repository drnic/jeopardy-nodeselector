apiVersion: v1
kind: Namespace
metadata:
  # Create a namespace that we'll match on
  name: multiarch-test
  labels:
    multiarch: "true"
---
apiVersion: admissionregistration.k8s.io/v1beta1
kind: MutatingWebhookConfiguration
metadata:
  name: jeopardy-nodeselector
webhooks:
  - name: jeopardy-nodeselector.starkandwayne.com
    sideEffects: None
    # "Equivalent" provides insurance against API version upgrades/changes - e.g.
    # extensions/v1beta1 Ingress -> networking.k8s.io/v1beta1 Ingress
    # matchPolicy: Equivalent
    rules:
      - apiGroups:
          - ""
        apiVersions:
          - "*"
        operations:
          - "CREATE"
          - "UPDATE"
        resources:
          - "pods"
      - apiGroups:
          - "apps"
        apiVersions:
          - "*"
        operations:
          - "CREATE"
          - "UPDATE"
        resources:
          - "deployments"
          - "statefulsets"
          - "daemonsets"
      - apiGroups:
          - "batch"
        apiVersions:
          - "*"
        operations:
          - "CREATE"
          - "UPDATE"
        resources:
          - "jobs"
    namespaceSelector:
      matchExpressions:
        # Any Namespace with a label matching the below will have its
        # annotations validated by this admission controller
        - key: "multiarch"
          operator: In
          values: ["true"]
    failurePolicy: Fail
    clientConfig:
      service:
        # This is the hostname our certificate needs in its Subject Alternative
        # Name array - name.namespace.svc
        # If the certificate does NOT have this name, TLS validation will fail.
        name: jeopardy-nodeselector
        namespace: default
        path: "/jeopardy-nodeselector/multiarch"
      caBundle: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVuekNDQTRlZ0F3SUJBZ0lSQUwvQnYxZStPYzdiY0VkajR3S3lZL2t3RFFZSktvWklodmNOQVFFTEJRQXcKUXpFVk1CTUdBMVVFQ2hNTVkyVnlkQzF0WVc1aFoyVnlNU293S0FZRFZRUURFeUZxWlc5d1lYSmtlUzF1YjJSbApjMlZzWldOMGIzSXVaR1ZtWVhWc2RDNXpkbU13SGhjTk1qQXdNVEF6TWpFd05qTXpXaGNOTWpBd05EQXlNakV3Ck5qTXpXakJETVJVd0V3WURWUVFLRXd4alpYSjBMVzFoYm1GblpYSXhLakFvQmdOVkJBTVRJV3BsYjNCaGNtUjUKTFc1dlpHVnpaV3hsWTNSdmNpNWtaV1poZFd4MExuTjJZekNDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUApBRENDQVFvQ2dnRUJBT2xKdWp4Y1ZOWlkycDdmcUVjNFhYR3RPdVhTU1VUdHdEN0FPam1CVjJvMWcycDdnT1ZECnkvUmdZZW15K0RIOXJQYmZrU3BwYWFtd2xNdVQrZDBYV2l6Q2ZlZWhDT09RSjZXdFpCenM0bXROWEdyV3M1bVMKVG1jUG5WN21nRHpKd250NENjdXZVWEVqdDduNDhjRjR0U1NZdnR1OGRjcHhFZmxVVXlEanY0VHNjbjl0R3lQMQpEZzB4SWE2U25HZjMwZDY5RWVvdGVCUnZ2bDdBZjJObkYxYndFa2NMT1M1MWFTeW9jdWF0eGxCbWlOeGFQWmZxCkViMWpMVlRyR09rRko4NnVjcEVYK2I1QlllcEVoMVA3WVNFOEN6NEY3TzBueG4rVzNEWkVHSDJBamEzekhEZlMKM2E1S09SYzRubU9kOFNSNW4wc1VzZ21CWTR4TmxjVlE5T01DQXdFQUFhT0NBWXd3Z2dHSU1CTUdBMVVkSlFRTQpNQW9HQ0NzR0FRVUZCd01CTUF3R0ExVWRFd0VCL3dRQ01BQXdnZ0ZoQmdOVkhSRUVnZ0ZZTUlJQlZJSWhhbVZ2CmNHRnlaSGt0Ym05a1pYTmxiR1ZqZEc5eUxtUmxabUYxYkhRdWMzWmpnaTlxWlc5d1lYSmtlUzF1YjJSbGMyVnMKWldOMGIzSXVaR1ZtWVhWc2RDNXpkbU11WTJ4MWMzUmxjaTVzYjJOaGJJSXZhbVZ2Y0dGeVpIa3RibTlrWlhObApiR1ZqZEc5eUxtcGxiM0JoY21SNUxXNXZaR1Z6Wld4bFkzUnZjaTV6ZG1PQ0wycGxiM0JoY21SNUxXNXZaR1Z6ClpXeGxZM1J2Y2k1cVpXOXdZWEprZVMxdWIyUmxjMlZzWldOMGIzSXVjM1pqZ2tKcVpXOXdZWEprZVMxdWIyUmwKYzJWc1pXTjBiM0l1YW1WdmNHRnlaSGt0Ym05a1pYTmxiR1ZqZEc5eUxYUmxjM1F1YzNaakxtTnNkWE4wWlhJdQpiRzlqWVd5Q1FtcGxiM0JoY21SNUxXNXZaR1Z6Wld4bFkzUnZjaTVxWlc5d1lYSmtlUzF1YjJSbGMyVnNaV04wCmIzSXRkR1Z6ZEM1emRtTXVZMngxYzNSbGNpNXNiMk5oYklJSmJHOWpZV3hvYjNOMGdna3hNamN1TUM0d0xqRXcKRFFZSktvWklodmNOQVFFTEJRQURnZ0VCQURoY2RJNGltUkRveW5ucnZLWVJnRnRFa01YUzFvUnhRbFhSdE8yOQo3cGFVNXM2OXR1USthZkV5R25JeDE1VmVaOGg0NCtJcFV5NkYrenhIdmQ4QmNMQ0R3T0dzWEZqaEx2VkNsRmlXCnFhQm1razJJc2pMUEtQUU9FYXgwQitMUjNzZ2dCc3BwYVBkSytzWHprVnE4alhWUm0xWGIzT1Y5RGlGb2JmMEcKNE9EZzJwWnpRK0xXRnByTzNUS1ZaRUFldHdhVlZWMUJzT0tpUFBhUjNJU21NM05NbW9DRDNNWDc2VnpBZjN5WQpiTjhaRGhYMGtPZGlHanVud1ZrM1lsR2xtandna3Fwa1JYcEVrQUhwTnlXU2FBbGlZVURtdFlMSlVlQnFxbG9uCmo3UHFoajJRRzYrMk1MaUdNUHZDcGlGSFYzdFlSVGhIN05WYjdVTFNzNzVnZzQ0PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
